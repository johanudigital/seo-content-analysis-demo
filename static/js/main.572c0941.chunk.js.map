{"version":3,"sources":["seo-content-outline-tool.js","index.js"],"names":["SEOContentOutlineTool","content","setContent","useState","keyword","setKeyword","seoScore","setSeoScore","feedback","setFeedback","metaTitle","setMetaTitle","metaDescription","setMetaDescription","metaTitleFeedback","setMetaTitleFeedback","metaDescriptionFeedback","setMetaDescriptionFeedback","activeTab","setActiveTab","useEffect","analyzeSEO","analyzeMeta","score","feedbackItems","wordCount","split","length","push","slice","toLowerCase","includes","keywordDensity","match","RegExp","titleFeedbackItems","descriptionFeedbackItems","titleLength","ctaKeywords","some","cta","test","descriptionLength","startsWith","_jsxs","className","children","_jsx","onClick","_Fragment","type","value","onChange","e","target","placeholder","style","width","concat","map","item","index","ReactDOM","render","Router","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.572c0941.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SEOContentOutlineTool = () => {\n  const [content, setContent] = useState('');\n  const [keyword, setKeyword] = useState('');\n  const [seoScore, setSeoScore] = useState(0);\n  const [feedback, setFeedback] = useState([]);\n  const [metaTitle, setMetaTitle] = useState('');\n  const [metaDescription, setMetaDescription] = useState('');\n  const [metaTitleFeedback, setMetaTitleFeedback] = useState([]);\n  const [metaDescriptionFeedback, setMetaDescriptionFeedback] = useState([]);\n  const [activeTab, setActiveTab] = useState('content');\n\n  useEffect(() => {\n    if (content && keyword) {\n      analyzeSEO();\n    }\n  }, [content, keyword]);\n\n  useEffect(() => {\n    if (metaTitle || metaDescription) {\n      analyzeMeta();\n    }\n  }, [metaTitle, metaDescription]);\n\n  const analyzeSEO = () => {\n    let score = 0;\n    let feedbackItems = [];\n\n    // Check content length\n    const wordCount = content.split(/\\s+/).length;\n    if (wordCount >= 300) {\n      score += 20;\n      feedbackItems.push(\"✅ Good content length (300+ words)\");\n    } else {\n      feedbackItems.push(\"❌ Content is too short. Aim for 300+ words\");\n    }\n\n    // Check keyword presence in the first 100 characters\n    if (content.slice(0, 100).toLowerCase().includes(keyword.toLowerCase())) {\n      score += 15;\n      feedbackItems.push(\"✅ Keyword present in the introduction\");\n    } else {\n      feedbackItems.push(\"❌ Include the keyword in the first 100 characters\");\n    }\n\n    // Check keyword density\n    const keywordCount = (content.toLowerCase().match(new RegExp(keyword.toLowerCase(), \"g\")) || []).length;\n    const keywordDensity = (keywordCount / wordCount) * 100;\n    if (keywordDensity >= 0.5 && keywordDensity <= 2.5) {\n      score += 15;\n      feedbackItems.push(\"✅ Good keyword density\");\n    } else if (keywordDensity > 2.5) {\n      feedbackItems.push(\"❌ Keyword stuffing detected. Reduce keyword usage\");\n    } else {\n      feedbackItems.push(\"❌ Increase keyword usage slightly\");\n    }\n\n    // Check for headings\n    if (content.includes('#')) {\n      score += 10;\n      feedbackItems.push(\"✅ Headings detected\");\n    } else {\n      feedbackItems.push(\"❌ Add headings (use # for h1, ## for h2, etc.)\");\n    }\n\n    // Check for links\n    if (content.includes('http') || content.includes('www')) {\n      score += 10;\n      feedbackItems.push(\"✅ Links detected\");\n    } else {\n      feedbackItems.push(\"❌ Add internal or external links\");\n    }\n\n    // Check for bullet points or numbered lists\n    if (content.includes('-') || content.includes('1.')) {\n      score += 10;\n      feedbackItems.push(\"✅ Lists detected\");\n    } else {\n      feedbackItems.push(\"❌ Consider adding bullet points or numbered lists\");\n    }\n\n    // Check for image alt text (simulated)\n    if (content.includes('![') && content.includes('](')) {\n      score += 10;\n      feedbackItems.push(\"✅ Image with alt text detected\");\n    } else {\n      feedbackItems.push(\"❌ Add images with descriptive alt text\");\n    }\n\n    // Update state\n    setSeoScore(score);\n    setFeedback(feedbackItems);\n  };\n\n  const analyzeMeta = () => {\n    let titleFeedbackItems = [];\n    let descriptionFeedbackItems = [];\n\n    // Check meta title length\n    const titleLength = metaTitle.length;\n    if (titleLength >= 50 && titleLength <= 60) {\n      titleFeedbackItems.push(\"✅ Good meta title length (50-60 characters)\");\n    } else if (titleLength < 50) {\n      titleFeedbackItems.push(\"❌ Meta title is too short. Aim for 50-60 characters\");\n    } else {\n      titleFeedbackItems.push(\"❌ Meta title is too long. Aim for 50-60 characters\");\n    }\n\n    // Check keyword presence in meta title\n    if (metaTitle.toLowerCase().includes(keyword.toLowerCase())) {\n      titleFeedbackItems.push(\"✅ Keyword present in meta title\");\n    } else {\n      titleFeedbackItems.push(\"❌ Include the keyword in the meta title\");\n    }\n\n    // Check for Call-to-Action keyword in meta title\n    const ctaKeywords = [\"buy\", \"get\", \"try\", \"find\", \"learn\"];\n    if (ctaKeywords.some(cta => metaTitle.toLowerCase().includes(cta))) {\n      titleFeedbackItems.push(\"✅ Call-to-Action keyword present in meta title\");\n    } else {\n      titleFeedbackItems.push(\"❌ Consider adding a Call-to-Action keyword in the meta title\");\n    }\n\n    // Check for special characters in meta title\n    if (/[^a-zA-Z0-9\\s]/.test(metaTitle)) {\n      titleFeedbackItems.push(\"❌ Avoid using special characters in the meta title\");\n    } else {\n      titleFeedbackItems.push(\"✅ No special characters in meta title\");\n    }\n\n    // Check for unique meta title\n    if (metaTitle.toLowerCase() !== content.toLowerCase().slice(0, 60)) {\n      titleFeedbackItems.push(\"✅ Unique meta title\");\n    } else {\n      titleFeedbackItems.push(\"❌ Meta title is too similar to the content. Make it unique\");\n    }\n\n    // Check meta description length\n    const descriptionLength = metaDescription.length;\n    if (descriptionLength >= 50 && descriptionLength <= 160) {\n      descriptionFeedbackItems.push(\"✅ Good meta description length (50-160 characters)\");\n    } else if (descriptionLength < 50) {\n      descriptionFeedbackItems.push(\"❌ Meta description is too short. Aim for 50-160 characters\");\n    } else {\n      descriptionFeedbackItems.push(\"❌ Meta description is too long. Aim for 50-160 characters\");\n    }\n\n    // Check keyword presence in meta description\n    if (metaDescription.toLowerCase().includes(keyword.toLowerCase())) {\n      descriptionFeedbackItems.push(\"✅ Keyword present in meta description\");\n    } else {\n      descriptionFeedbackItems.push(\"❌ Include the keyword in the meta description\");\n    }\n\n    // Check for Call-to-Action in meta description\n    if (ctaKeywords.some(cta => metaDescription.toLowerCase().includes(cta))) {\n      descriptionFeedbackItems.push(\"✅ Call-to-Action present in meta description\");\n    } else {\n      descriptionFeedbackItems.push(\"❌ Consider adding a Call-to-Action in the meta description\");\n    }\n\n    // Check for natural language and readability in meta description\n    const readabilityScore = (metaDescription.split(' ').length / metaDescription.split('.').length) < 20;\n    if (readabilityScore) {\n      descriptionFeedbackItems.push(\"✅ Meta description is readable and uses natural language\");\n    } else {\n      descriptionFeedbackItems.push(\"❌ Improve readability and use natural language in meta description\");\n    }\n\n    // Check for duplicate meta description\n    // Assuming a function `isDuplicateMetaDescription` exists to check for duplicates\n    const isDuplicateMetaDescription = (description) => {\n      // Implement your logic to check for duplicate meta descriptions\n      return false;\n    };\n    if (isDuplicateMetaDescription(metaDescription)) {\n      descriptionFeedbackItems.push(\"❌ Duplicate meta description detected. Make it unique\");\n    } else {\n      descriptionFeedbackItems.push(\"✅ Meta description is unique\");\n    }\n\n    // Check for keyword at the beginning of meta description\n    if (metaDescription.toLowerCase().startsWith(keyword.toLowerCase())) {\n      descriptionFeedbackItems.push(\"✅ Keyword at the beginning of meta description\");\n    } else {\n      descriptionFeedbackItems.push(\"❌ Consider starting the meta description with the keyword\");\n    }\n\n    // Update state\n    setMetaTitleFeedback(titleFeedbackItems);\n    setMetaDescriptionFeedback(descriptionFeedbackItems);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>UDigital SEO tool</h1>\n      <div className=\"tabs\">\n        <button onClick={() => setActiveTab('content')} className={activeTab === 'content' ? 'active' : ''}>Content</button>\n        <button onClick={() => setActiveTab('meta')} className={activeTab === 'meta' ? 'active' : ''}>Meta</button>\n      </div>\n      {activeTab === 'content' && (\n        <>\n          <div className=\"mb-4\">\n            <input\n              type=\"text\"\n              value={keyword}\n              onChange={(e) => setKeyword(e.target.value)}\n              placeholder=\"Enter target keyword\"\n            />\n          </div>\n          <div className=\"mb-4\">\n            <textarea\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              placeholder=\"Enter your content here...\"\n            />\n          </div>\n          <div className=\"seo-score\">\n            <h2>SEO Score: {seoScore}/100</h2>\n            <div className=\"progress-bar\">\n              <div className=\"progress-bar-inner\" style={{ width: `${seoScore}%` }}></div>\n            </div>\n          </div>\n          <div>\n            <h3>SEO Feedback:</h3>\n            <ul className=\"feedback\">\n              {feedback.map((item, index) => (\n                <li key={index}>{item}</li>\n              ))}\n            </ul>\n          </div>\n        </>\n      )}\n      {activeTab === 'meta' && (\n        <>\n          <div className=\"mb-4\">\n            <input\n              type=\"text\"\n              value={metaTitle}\n              onChange={(e) => setMetaTitle(e.target.value)}\n              placeholder=\"Enter meta title here...\"\n            />\n          </div>\n          <div className=\"mb-4\">\n            <textarea\n              value={metaDescription}\n              onChange={(e) => setMetaDescription(e.target.value)}\n              placeholder=\"Enter meta description here...\"\n            />\n          </div>\n          <div>\n            <h3>Meta Feedback:</h3>\n            {metaTitle && (\n              <>\n                <h4>Meta Title Feedback:</h4>\n                <ul className=\"feedback\">\n                  {metaTitleFeedback.map((item, index) => (\n                    <li key={index}>{item}</li>\n                  ))}\n                </ul>\n              </>\n            )}\n            {metaDescription && (\n              <>\n                <h4>Meta Description Feedback:</h4>\n                <ul className=\"feedback\">\n                  {metaDescriptionFeedback.map((item, index) => (\n                    <li key={index}>{item}</li>\n                  ))}\n                </ul>\n              </>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SEOContentOutlineTool;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport SEOContentOutlineTool from './seo-content-outline-tool';\nimport './index.css';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <SEOContentOutlineTool />\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}